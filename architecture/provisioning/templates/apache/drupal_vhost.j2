{% set vhost_name    = item.value.vhost_name|default(item.key) %}
{% set vhost_params  = item.value %}
{% set document_root = vhost_params.document_root|default('/var/www/' + vhost_name) %}
{% set ssl_enabled   = vhost_params.ssl is defined and vhost_params.ssl.enabled|default(false) %}
{% if ansible_os_family == 'Debian' %}{% set _logpath = '${APACHE_LOG_DIR}' %}{% endif %}
{% if ansible_os_family == 'RedHat' %}{% set _logpath = 'logs' %}{% endif %}
<VirtualHost *:{{apache2_ssl_port if ssl_enabled else apache2_port}}>
    ServerName   {{vhost_params.server_name|default(ansible_fqdn)}}

    {% for alias in vhost_params.server_aliases|default([]) %}
        ServerAlias  {{alias}}
    {% endfor %}
    ServerAdmin webmaster@localhost

    {% if vhost_params.environment_vars is defined %}
        {%     for env_var_name, env_var_value in vhost_params.environment_vars.iteritems()|default([]) %}
            SetEnv {{env_var_name}} {{env_var_value}}
        {%     endfor %}
    {% endif %}

    DocumentRoot {{document_root}}
    DirectoryIndex index.php

    <Directory {{document_root}}>

        # Protect files and directories from prying eyes.
        <FilesMatch "\.(engine|inc|install|make|module|profile|po|sh|.*sql|theme|twig|tpl(\.php)?|xtmpl|yml|txt)(~|\.sw[op]|\.bak|\.orig|\.save)?$|^(\.(?!well-known).*|Entries.*|Repository|Root|Tag|Template|composer\.(json|lock))$|^#.*#$|\.php(~|\.sw[op]|\.bak|\.orig|\.save)$">
            Order deny,allow
            Deny from all
        </FilesMatch>

        Options -Indexes +FollowSymLinks
        Options +FollowSymLinks
        AllowOverride None
        Require all granted

        # Make Drupal handle any 404 errors.
        ErrorDocument 404 /index.php

        # Force simple error message for requests for non-existent favicon.ico.
        <Files favicon.ico>
            # There is no end quote below, for compatibility with Apache 1.3.
            ErrorDocument 404 "The requested file favicon.ico was not found."
        </Files>

        #########################################################################
        # mod_expires
        #########################################################################
        ExpiresActive On
        ExpiresByType image/gif "access plus 1 day"
        ExpiresByType image/jpg "access plus 1 day"
        ExpiresByType image/jpeg "access plus 1 day"
        ExpiresByType image/png "access plus 1 day"
        ExpiresByType image/x-icon "access plus 1 day"
        ExpiresByType text/css "access plus 1 day"
        ExpiresByType application/javascript "access plus 1 day"

        #########################################################################
        # mod_rewrite
        #########################################################################
        RewriteEngine on

        # Set "protossl" to "s" if we were accessed via https://.  This is used later
        # if you enable "www." stripping or enforcement, in order to ensure that
        # you don't bounce between http and https.
        RewriteRule ^ - [E=protossl]
        RewriteCond %{HTTPS} on
        RewriteRule ^ - [E=protossl:s]

        # Make sure Authorization HTTP header is available to PHP
        # even when running as CGI or FastCGI.
        RewriteRule ^ - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization}]

        # Block access to "hidden" directories whose names begin with a period. This
        # includes directories used by version control systems such as Subversion or
        # Git to store control files. Files whose names begin with a period, as well
        # as the control files used by CVS, are protected by the FilesMatch directive
        # above.
        RewriteRule "(^|/)\.(?!well-known)" - [F]

        # Redirect common PHP files to their new locations.
        RewriteCond %{REQUEST_URI} ^(.*)?/(install.php) [OR]
        RewriteCond %{REQUEST_URI} ^(.*)?/(rebuild.php)
        RewriteCond %{REQUEST_URI} !core
        RewriteRule ^ %1/core/%2 [L,QSA,R=301]

        # Rewrite install.php during installation to see if mod_rewrite is working
        RewriteRule ^core/install.php core/install.php?rewrite=ok [QSA,L]

        # Pass all requests not referring directly to files in the filesystem to
        # index.php.
        RewriteCond %{REQUEST_FILENAME} !-f
        RewriteCond %{REQUEST_FILENAME} !-d
        RewriteCond %{REQUEST_URI} !=/favicon.ico
        RewriteRule ^ index.php [L]

        # For security reasons, deny access to other PHP files on public sites.
        # Note: The following URI conditions are not anchored at the start (^),
        # because Drupal may be located in a subdirectory. To further improve
        # security, you can replace '!/' with '!^/'.
        # Allow access to PHP files in /core (like authorize.php or install.php):
        RewriteCond %{REQUEST_URI} !/core/[^/]*\.php$

        # Allow access to test-specific PHP files:
        RewriteCond %{REQUEST_URI} !/core/modules/system/tests/https?.php

        # Allow access to Statistics module's custom front controller.
        # Copy and adapt this rule to directly execute PHP files in contributed or
        # custom modules or to run another PHP application in the same directory.
        RewriteCond %{REQUEST_URI} !/core/modules/statistics/statistics.php$

        # Deny access to any other PHP files that do not match the rules above.
        # Specifically, disallow autoload.php from being served directly.
        RewriteRule "^(.+/.*|autoload)\.php($|/)" - [F]

        # Rules to correctly serve gzip compressed CSS and JS files.
        # Requires both mod_rewrite and mod_headers to be enabled.
        # Serve gzip compressed CSS files if they exist and the client accepts gzip.
        RewriteCond %{HTTP:Accept-encoding} gzip
        RewriteCond %{REQUEST_FILENAME}\.gz -s
        RewriteRule ^(.*)\.css $1\.css\.gz [QSA]

        # Serve gzip compressed JS files if they exist and the client accepts gzip.
        RewriteCond %{HTTP:Accept-encoding} gzip
        RewriteCond %{REQUEST_FILENAME}\.gz -s
        RewriteRule ^(.*)\.js $1\.js\.gz [QSA]

        # Serve correct content types, and prevent mod_deflate double gzip.
        RewriteRule \.css\.gz$ - [T=text/css,E=no-gzip:1]
        RewriteRule \.js\.gz$ - [T=text/javascript,E=no-gzip:1]

        <FilesMatch "(\.js\.gz|\.css\.gz)$">
            # Serve correct encoding type.
            Header set Content-Encoding gzip
            # Force proxies to cache gzipped & non-gzipped css/js files separately.
            Header append Vary Accept-Encoding
        </FilesMatch>

        # Various header fixes.
        # Disable content sniffing, since it's an attack vector.
        Header always set X-Content-Type-Options nosniff

        # Disable Proxy header, since it's an attack vector.
        RequestHeader unset Proxy
    </Directory>

    ## Public files directory, security against executing uploaded php code.
    <Directory {{document_root}}/sites/default/files>
        # Turn off all options we don't need.
        Options -Indexes -ExecCGI -Includes -MultiViews

        # Set the catch-all handler to prevent scripts from being executed.
        SetHandler Drupal_Security_Do_Not_Remove_See_SA_2006_006
        <Files *>
            # Override the handler again if we're run later in the evaluation list.
            SetHandler Drupal_Security_Do_Not_Remove_See_SA_2013_003
        </Files>

        # If we know how to do it safely, disable the PHP engine entirely.
        {% if drupal_php_mode != 'fpm' %}
        php_flag engine 0
        {% else %}
        <FilesMatch \.php$>
            SetHandler None
            ForceType text/plain
        </FilesMatch>
        {% endif %}
    </Directory>

    ## Enable PHP handler in fpm mode
    {% if drupal_php_mode == 'fpm' %}
        ## PHP-FPM
        <FilesMatch "\.php$">
                    SetHandler "proxy:fcgi://localhost:9000"
        </FilesMatch>
    {% endif %}

    ErrorLog    {{ _logpath }}/error-{{vhost_name}}.log
    CustomLog   {{ _logpath }}/access-{{vhost_name}}.log smile_combined_remoteip
</VirtualHost>